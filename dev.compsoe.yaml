version: "3"

services:
  music_server_dev:
    build:
      file: dev.dockerfile
    image: music_server:dev
    build:
      dockerfile: dev.dockerfile
    container_name: music_server_dev
    networks:
      - frontend
      - backend
    environment:
      - PUID=1000
      - PGIO=1000
      - TZ=Europe/Copenhagen
      - DEFAULT_WORKSPACE=/config
      - SUDO_PASSWORD="abc"
    volumes:
      - .:/config/workspace
      - ~/Documents/vscode/music_server:/config
      - ./tmp:/music
    ports:
      - 8080:8080
      - 8443:8443
    labels:
      - 'pihole.url=music-dev.home'
      - 'traefik.enable=true'
      - 'traefik.http.routers.music_dev.rule=Host(`music-dev.home`)'
      - 'traefik.http.routers.music_dev.entrypoints=web'
      - 'traefik.http.services.music_dev.loadbalancer.server.port=8443'

  app:
    build:
      context: music_server_app
      target: development
    image: music_server:app
    #    ports:
    #  - 80:8081
    volumes:
      - ./music_server_app:/app
      - ./tmp:/app/public/music
    networks:
      - frontend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.music-app.rule=Host(`music.home`)'
      - 'traefik.http.routers.music-app.entrypoints=web'
      - 'traefik.http.services.music-app.loadbalancer.server.port=8080'
      - 'traefik.docker.network=frontend'
    depends_on:
      - api
  api:
    build:
      context: music_server_flask
    image: music_server:api
    command: /start
    volumes:
      - ./music_server_flask:/app
      - ./tmp:/music
    ports:
      - 5000:5000
    env_file:
      - .env/.dev-sample
    environment:
      - FLASK_APP=app
    networks:
      - frontend
      - backend
    depends_on:
      - redis
      - db
    labels:
      - 'pihole.url=music.home'
      - 'traefik.enable=true'
      - 'traefik.http.routers.music-api.rule=(Host(`music.home`) && PathPrefix(`/api`))'
      - 'traefik.http.routers.music-api.entrypoints=web'
      - 'traefik.http.services.music-api.loadbalancer.server.port=5000'
      - 'traefik.docker.network=frontend'

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend
    environment:
      - POSTGRES_DB=flask_celery
      - POSTGRES_USER=flask_celery
      - POSTGRES_PASSWORD=flask_celery

  redis:
    image: redis:6-alpine
    networks:
      - backend

  celery_worker:
    image: music_server:api
    command: /start-celeryworker
    volumes:
      - ./music_server_flask:/app
      - ./tmp:/music
    env_file:
      - .env/.dev-sample
    networks:
      - backend
    environment:
      - FLASK_APP=app
    depends_on:
      - redis
      - db

  celery_beat:
    image: music_server:api
    command: /start-celerybeat
    volumes:
      - ./music_server_flask:/app
      - ./tmp:/music
    env_file:
      - .env/.dev-sample
    networks:
      - backend
    environment:
      - FLASK_APP=app
    depends_on:
      - redis
      - db

  celery_flower:
    image: music_server:api
    command: /start-celeryflower
    volumes:
      - ./music_server_flask:/app
      - ./tmp:/music
    networks:
      - backend
    env_file:
      - .env/.dev-sample
    environment:
      - FLASK_APP=app
    ports:
      - 5557:5555
    depends_on:
      - redis
      - db

volumes:
  postgres_data:

networks:
  frontend:
    external: true
  backend:
    external: false
